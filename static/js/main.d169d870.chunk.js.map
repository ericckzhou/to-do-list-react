{"version":3,"sources":["Todo.js","TodoList.js","App.js","index.js"],"names":["Todo","todo","toggleTodo","type","checked","complete","onChange","id","name","TodoList","todos","map","LOCAL_STORAGE_KEY","App","useState","setTodos","todoNameRef","useRef","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","newTodos","find","ref","onClick","event","current","value","prevTodos","replace","c","r","Math","random","toString","filter","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAEe,SAASA,EAAT,GAAqC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,WAIjC,OACI,gCACI,uBAAOC,KAAK,WAAWC,QAASH,EAAKI,SAAUC,SALvD,WACIJ,EAAWD,EAAKM,OAMXN,EAAKO,QCPH,SAASC,EAAT,GAA0C,IAAtBC,EAAqB,EAArBA,MAAOR,EAAc,EAAdA,WACtC,OACIQ,EAAMC,KAAI,SAAAV,GACN,OAAO,cAACD,EAAD,CAAoBC,KAAMA,EAAMC,WAAYA,GAAjCD,EAAKM,O,MCOnC,IAAMK,EAAoB,UAqDXC,MAnDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNJ,EADM,KACCK,EADD,KAEPC,EAAcC,mBAoCpB,OAlCAC,qBAAU,WACR,IAAMC,EAAcC,KAAKC,MAAMC,aAAaC,QAAQX,IAChDO,GAAaJ,EAASI,KACzB,IAEHD,qBAAU,WACRI,aAAaE,QAAQZ,EAAmBQ,KAAKK,UAAUf,MACtD,CAACA,IA4BF,qCAEA,cAACD,EAAD,CAAUC,MAASA,EAAOR,WA3B5B,SAAoBK,GAClB,IAAMmB,EAAQ,YAAOhB,GAEfT,EAAOyB,EAASC,MAAK,SAAA1B,GAAI,OAAIA,EAAKM,KAAOA,KAC/CN,EAAKI,UAAYJ,EAAKI,SACtBU,EAASW,MAuBT,uBAAOE,IAAKZ,EAAab,KAAK,SAC9B,wBAAQ0B,QArBV,SAAiBC,GACf,IAAMtB,EAAOQ,EAAYe,QAAQC,MACrB,IAARxB,IAEJO,GAAS,SAAAkB,GACP,MAAM,GAAN,mBAAWA,GAAX,CAAsB,CAAC1B,GAnCpB,uCAAuC2B,QAAQ,SAAS,SAASC,GACtE,IAAIC,EAAoB,GAAhBC,KAAKC,SAAgB,EAC7B,OADyC,KAALH,EAAWC,EAAS,EAAJA,EAAU,GACrDG,SAAS,OAiCqB/B,KAAMA,EAAMH,UAAU,QAE7DW,EAAYe,QAAQC,MAAQ,OAc5B,iBACA,wBAAQH,QAbV,WACE,IAAMH,EAAWhB,EAAM8B,QAAO,SAAAvC,GAAI,OAAKA,EAAKI,YAC5CU,EAASW,IAWT,oBACH,wBAAQG,QAVP,WACCd,EAAS,KASX,mBACG,oCAAOL,EAAM8B,QAAO,SAAAvC,GAAI,OAAKA,EAAKI,YAAUoC,OAA5C,sBCzDJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d169d870.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Todo({ todo, toggleTodo }) {\r\n    function handleTodoClick(){\r\n        toggleTodo(todo.id)\r\n    }\r\n    return (\r\n        <div>\r\n            <input type=\"checkbox\" checked={todo.complete} onChange={handleTodoClick} //when checked \r\n            />\r\n            {todo.name}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Todo from './Todo'\r\n\r\nexport default function TodoList({ todos, toggleTodo }) {\r\n    return (\r\n        todos.map(todo => {\r\n            return <Todo key={todo.id} todo={todo} toggleTodo={toggleTodo} />\r\n        })\r\n    )\r\n}\r\n","\nimport React, { useState, useRef, useEffect } from 'react';\nimport TodoList from './TodoList'\nimport './styles.css'\n\n/*for random ids*/\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\nconst LOCAL_STORAGE_KEY = 'todoApp'\n\nfunction App() {\n  const [todos, setTodos] = useState([])\n  const todoNameRef = useRef()\n  \n  useEffect(() => { //store/load, called once\n    const storedTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) //parse string to array\n    if (storedTodos) setTodos(storedTodos)\n  }, []) //empty array never changes => called once\n\n  useEffect(() => { //set, pass in a fcn and array => refresh stores it\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos))\n  }, [todos]) //anytime todos array changes, it uses this effect\n\n\n  function toggleTodo(id){\n    const newTodos = [...todos]\n    //to not change state variable todos, create cpy\n    const todo = newTodos.find(todo => todo.id === id)\n    todo.complete = !todo.complete\n    setTodos(newTodos)\n  }\n\n  function addToDo(event){\n    const name = todoNameRef.current.value\n    if (name == '') return\n    \n    setTodos(prevTodos =>{\n      return [...prevTodos, {id: uuidv4(), name: name, complete: false}]\n    })\n    todoNameRef.current.value = null\n  }\n  function clearTodos(){\n    const newTodos = todos.filter(todo => !todo.complete)\n    setTodos(newTodos)\n  }\n  function clearAll(){\n\t  setTodos([])\n  }\n  return (\n    <>\n    {/*empty fragment*/}\n    <TodoList todos = {todos} toggleTodo={toggleTodo} />\n    <input ref={todoNameRef} type=\"text\" />\n    <button onClick={addToDo}>Add</button>\n    <button onClick={clearTodos}>Remove</button>\n\t<button onClick={clearAll}>Clear</button>\n    <div> {todos.filter(todo => !todo.complete).length} left to do!</div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}